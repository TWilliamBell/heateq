% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r_one.d.heat.eq.R
\name{r_one.d.heat.eq}
\alias{r_one.d.heat.eq}
\title{A One-Dimensional Heat Equation solver written in R}
\usage{
r_one.d.heat.eq(n = 1000, init.dat = dgamma(seq(0, 5, 0.01), shape =
  3), boundary = c("neumann", "dirichlet"), alpha = 1, dt = 0.1,
  eps = 1e-05, save.intermediates = F)
}
\arguments{
\item{n}{the Number of Time steps you wish to solve for.}

\item{init.dat}{the initial layout of points (must be a vector).}

\item{boundary}{currently supports two boundary conditions, Neumann and Dirichlet.}

\item{alpha}{the heat equation is parameterized here by dU/dt = alpha * d^2U/(dx)^2, if you set alpha large you may need to set the time step shorter.}

\item{dt}{the length of each time step.}

\item{eps}{sometimes I've observed unexpected behaviour when the numbers get very small, in order to combat this I include an epsilon such that if a value is within that neighbourhood of zero they will be set to zero.  (Epsilon can be set to zero if you do not wish for this confound.)}

\item{save.intermediates}{A parameter stating whether you're interested in the final result only or also all of the intermediate time steps (beware, for long times this produces extremely large matrices).}
}
\description{
If you don't know what you want, you should use the C++ version instead (the default for one.d.heat.eq()).
}
\examples{

}
